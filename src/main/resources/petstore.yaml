---
openapi: 3.0.0
info:
  title: OpenAPI Petstore
  description: 'This spec is mainly for testing Petstore server and contains fake endpoints, models. Please do not use this for any other purpose. Special characters: " \'
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1
servers:
- url: http://{server}.swagger.io:{port}/v2
  description: petstore server
  variables:
    server:
      default: petstore
      enum:
      - petstore
      - qa-petstore
      - dev-petstore
    port:
      default: "80"
      enum:
      - "80"
      - "8080"
- url: https://localhost:8080/{version}
  description: The local server
  variables:
    version:
      default: v2
      enum:
      - v1
      - v2
- url: https://127.0.0.1/no_variable
  description: The local server without variables
tags:
- name: pet
  description: Everything about your Pets
- name: store
  description: Access to Petstore orders
- name: user
  description: Operations about user
paths:
  /foo:
    get:
      responses:
        default:
          description: response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_default'
  /pet:
    put:
      tags:
      - pet
      summary: Update an existing pet
      operationId: updatePet
      requestBody:
        $ref: '#/components/requestBodies/Pet'
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
      security:
      - http_signature_test: []
      - petstore_auth:
        - write:pets
        - read:pets
    post:
      tags:
      - pet
      summary: Add a new pet to the store
      operationId: addPet
      requestBody:
        $ref: '#/components/requestBodies/Pet'
      responses:
        "405":
          description: Invalid input
      security:
      - http_signature_test: []
      - petstore_auth:
        - write:pets
        - read:pets
    servers:
    - url: http://petstore.swagger.io/v2
    - url: http://path-server-test.petstore.local/v2
  /pet/findByStatus:
    get:
      tags:
      - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: true
        deprecated: true
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
            default: available
            enum:
            - available
            - pending
            - sold
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        "400":
          description: Invalid status value
      security:
      - http_signature_test: []
      - petstore_auth:
        - write:pets
        - read:pets
  /pet/findByTags:
    get:
      tags:
      - pet
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: true
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        "400":
          description: Invalid tag value
      deprecated: true
      security:
      - http_signature_test: []
      - petstore_auth:
        - write:pets
        - read:pets
  /pet/{petId}:
    get:
      tags:
      - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
      - name: petId
        in: path
        description: ID of pet to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
      - api_key: []
    post:
      tags:
      - pet
      summary: Updates a pet in the store with form data
      operationId: updatePetWithForm
      parameters:
      - name: petId
        in: path
        description: ID of pet that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/pet_petId_body'
      responses:
        "405":
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
    delete:
      tags:
      - pet
      summary: Deletes a pet
      operationId: deletePet
      parameters:
      - name: api_key
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: petId
        in: path
        description: Pet id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid pet value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /pet/{petId}/uploadImage:
    post:
      tags:
      - pet
      summary: uploads an image
      operationId: uploadFile
      parameters:
      - name: petId
        in: path
        description: ID of pet to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/petId_uploadImage_body'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /store/inventory:
    get:
      tags:
      - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
      - api_key: []
  /store/order:
    post:
      tags:
      - store
      summary: Place an order for a pet
      operationId: placeOrder
      requestBody:
        description: order placed for purchasing the pet
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          description: Invalid Order
  /store/order/{order_id}:
    get:
      tags:
      - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
      operationId: getOrderById
      parameters:
      - name: order_id
        in: path
        description: ID of pet that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          maximum: 5
          minimum: 1
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    delete:
      tags:
      - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
      - name: order_id
        in: path
        description: ID of the order that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
  /fake_classname_test:
    patch:
      tags:
      - fake_classname_tags 123#$%^
      summary: To test class name in snake case
      description: To test class name in snake case
      operationId: testClassname
      requestBody:
        $ref: '#/components/requestBodies/Client'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
      security:
      - api_key_query: []
  /fake:
    get:
      tags:
      - fake
      summary: To test enum parameters
      description: To test enum parameters
      operationId: testEnumParameters
      parameters:
      - name: enum_header_string_array
        in: header
        description: Header parameter enum test (string array)
        required: false
        style: simple
        explode: false
        schema:
          type: array
          items:
            type: string
            default: $
            enum:
            - '>'
            - $
      - name: enum_header_string
        in: header
        description: Header parameter enum test (string)
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: -efg
          enum:
          - _abc
          - -efg
          - (xyz)
      - name: enum_query_string_array
        in: query
        description: Query parameter enum test (string array)
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: $
            enum:
            - '>'
            - $
      - name: enum_query_string
        in: query
        description: Query parameter enum test (string)
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: -efg
          enum:
          - _abc
          - -efg
          - (xyz)
      - name: enum_query_integer
        in: query
        description: Query parameter enum test (double)
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          enum:
          - 1
          - -2
      - name: enum_query_double
        in: query
        description: Query parameter enum test (double)
        required: false
        style: form
        explode: true
        schema:
          type: number
          format: double
          enum:
          - 1.1
          - -1.2
      responses:
        "400":
          description: Invalid request
        "404":
          description: Not found
    post:
      tags:
      - fake
      summary: |
        Fake endpoint for testing various parameters
        假端點
        偽のエンドポイント
        가짜 엔드 포인트
      description: |
        Fake endpoint for testing various parameters
        假端點
        偽のエンドポイント
        가짜 엔드 포인트
      operationId: testEndpointParameters
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/fake_body'
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      security:
      - http_basic_test: []
    delete:
      tags:
      - fake
      summary: Fake endpoint to test group parameters (optional)
      description: Fake endpoint to test group parameters (optional)
      operationId: testGroupParameters
      parameters:
      - name: required_string_group
        in: query
        description: Required String in group parameters
        required: true
        style: form
        explode: true
        schema:
          type: integer
      - name: required_boolean_group
        in: header
        description: Required Boolean in group parameters
        required: true
        style: simple
        explode: false
        schema:
          type: boolean
      - name: required_int64_group
        in: query
        description: Required Integer in group parameters
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: string_group
        in: query
        description: String in group parameters
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: boolean_group
        in: header
        description: Boolean in group parameters
        required: false
        style: simple
        explode: false
        schema:
          type: boolean
      - name: int64_group
        in: query
        description: Integer in group parameters
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Someting wrong
      security:
      - bearer_test: []
      x-group-parameters: true
    patch:
      tags:
      - fake
      summary: To test "client" model
      description: To test "client" model
      operationId: testClientModel
      requestBody:
        $ref: '#/components/requestBodies/Client'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
  /fake/outer/number:
    post:
      tags:
      - fake
      description: Test serialization of outer number types
      operationId: fakeOuterNumberSerialize
      requestBody:
        description: Input number as post body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OuterNumber'
      responses:
        "200":
          description: Output number
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OuterNumber'
  /fake/outer/string:
    post:
      tags:
      - fake
      description: Test serialization of outer string types
      operationId: fakeOuterStringSerialize
      requestBody:
        description: Input string as post body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OuterString'
      responses:
        "200":
          description: Output string
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OuterString'
  /fake/outer/boolean:
    post:
      tags:
      - fake
      description: Test serialization of outer boolean types
      operationId: fakeOuterBooleanSerialize
      requestBody:
        description: Input boolean as post body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OuterBoolean'
      responses:
        "200":
          description: Output boolean
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OuterBoolean'
  /fake/outer/composite:
    post:
      tags:
      - fake
      description: Test serialization of object with outer number type
      operationId: fakeOuterCompositeSerialize
      requestBody:
        description: Input composite as post body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OuterComposite'
      responses:
        "200":
          description: Output composite
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/OuterComposite'
  /fake/jsonFormData:
    get:
      tags:
      - fake
      summary: test json serialization of form data
      operationId: testJsonFormData
      responses:
        "200":
          description: successful operation
  /fake/inline-additionalProperties:
    post:
      tags:
      - fake
      summary: test inline additionalProperties
      operationId: testInlineAdditionalProperties
      requestBody:
        description: request body
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        "200":
          description: successful operation
  /fake/body-with-query-params:
    put:
      tags:
      - fake
      operationId: testBodyWithQueryParams
      parameters:
      - name: query
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: Success
  /another-fake/dummy:
    patch:
      tags:
      - $another-fake?
      summary: To test special tags
      description: To test special tags and operation ID starting with number
      operationId: 123_test_@#$%_special_tags
      requestBody:
        $ref: '#/components/requestBodies/Client'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Client'
  /fake/body-with-file-schema:
    put:
      tags:
      - fake
      description: For this test, the body for this request much reference a schema named `File`.
      operationId: testBodyWithFileSchema
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileSchemaTestClass'
        required: true
      responses:
        "200":
          description: Success
  /fake/test-query-parameters:
    put:
      tags:
      - fake
      description: To test the collection format in query parameters
      operationId: testQueryParameterCollectionFormat
      parameters:
      - name: pipe
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      - name: ioutil
        in: query
        required: true
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: http
        in: query
        required: true
        style: spaceDelimited
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: url
        in: query
        required: true
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      - name: context
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: Success
  /fake/{petId}/uploadImageWithRequiredFile:
    post:
      tags:
      - pet
      summary: uploads an image (required)
      operationId: uploadFileWithRequiredFile
      parameters:
      - name: petId
        in: path
        description: ID of pet to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/petId_uploadImageWithRequiredFile_body'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /fake/health:
    get:
      tags:
      - fake
      summary: Health check endpoint
      responses:
        "200":
          description: The instance started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResult'
  /fake/array-of-enums:
    get:
      tags:
      - fake
      summary: Array of Enums
      operationId: getArrayOfEnums
      responses:
        "200":
          description: Got named array of enums
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfEnums'
components:
  schemas:
    Foo:
      type: object
      properties:
        bar:
          $ref: '#/components/schemas/Bar'
    Bar:
      type: string
      default: bar
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
          example: 2020-02-02T20:20:20.000222Z
        status:
          type: string
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      required:
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          default: default-name
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          x-is-unique: true
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
        objectWithNoDeclaredProps:
          type: object
          description: test code generation for objects Value must be a map of strings to values. It cannot be the 'null' value.
        objectWithNoDeclaredPropsNullable:
          type: object
          description: test code generation for nullable objects. Value must be a map of strings to values or the 'null' value.
          nullable: true
        anyTypeProp:
          description: test code generation for any type Here the 'type' attribute is not specified, which means the value can be anything, including the null value, string, number, boolean, array or object. See https://github.com/OAI/OpenAPI-Specification/issues/1389
        anyTypePropNullable:
          description: test code generation for any type Here the 'type' attribute is not specified, which means the value can be anything, including the null value, string, number, boolean, array or object. The 'nullable' attribute does not change the allowed values.
          nullable: true
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          x-is-unique: true
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Return:
      properties:
        return:
          type: integer
          format: int32
      description: Model for testing reserved words
      xml:
        name: Return
    Name:
      required:
      - name
      properties:
        name:
          type: integer
          format: int32
        snake_case:
          type: integer
          format: int32
          readOnly: true
        property:
          type: string
        "123Number":
          type: integer
          readOnly: true
      description: Model for testing model name same as property name
      xml:
        name: Name
    "200_response":
      properties:
        name:
          type: integer
          format: int32
        class:
          type: string
      description: Model for testing model name starting with number
      xml:
        name: Name
    ClassModel:
      properties:
        _class:
          type: string
      description: Model for testing model with "_class" property
    Dog:
      allOf:
      - $ref: '#/components/schemas/Animal'
      - type: object
        properties:
          breed:
            type: string
    Cat:
      allOf:
      - $ref: '#/components/schemas/Animal'
      - $ref: '#/components/schemas/Address'
      - type: object
        properties:
          declawed:
            type: boolean
    Address:
      type: object
      additionalProperties:
        type: integer
    Animal:
      required:
      - className
      type: object
      properties:
        className:
          type: string
        color:
          type: string
          default: red
      discriminator:
        propertyName: className
    AnimalFarm:
      type: array
      items:
        $ref: '#/components/schemas/Animal'
    format_test:
      required:
      - byte
      - date
      - number
      - password
      type: object
      properties:
        integer:
          multipleOf: 2
          maximum: 100
          minimum: 10
          type: integer
        int32:
          maximum: 200
          minimum: 20
          type: integer
          format: int32
        int64:
          type: integer
          format: int64
        number:
          multipleOf: 32.5
          maximum: 543.2
          minimum: 32.1
          type: number
        float:
          maximum: 987.6
          minimum: 54.3
          type: number
          format: float
        double:
          maximum: 123.4
          minimum: 67.8
          type: number
          format: double
        decimal:
          type: string
          format: number
        string:
          pattern: /[a-z]/i
          type: string
        byte:
          type: string
          format: byte
        binary:
          type: string
          format: binary
        date:
          type: string
          format: date
          example: 2020-02-02
        dateTime:
          type: string
          format: date-time
          example: 2007-12-03T10:15:30+01:00
        uuid:
          type: string
          format: uuid
          example: 72f98069-206d-4f12-9f12-3d1e525a8e84
        password:
          maxLength: 64
          minLength: 10
          type: string
          format: password
        pattern_with_digits:
          pattern: ^\d{10}$
          type: string
          description: A string that is a 10 digit number. Can have leading zeros.
        pattern_with_digits_and_delimiter:
          pattern: /^image_\d{1,3}$/i
          type: string
          description: A string starting with 'image_' (case insensitive) and one to three digits following i.e. Image_01.
    EnumClass:
      type: string
      default: -efg
      enum:
      - _abc
      - -efg
      - (xyz)
    Enum_Test:
      required:
      - enum_string_required
      type: object
      properties:
        enum_string:
          type: string
          enum:
          - UPPER
          - lower
          - ""
        enum_string_required:
          type: string
          enum:
          - UPPER
          - lower
          - ""
        enum_integer:
          type: integer
          format: int32
          enum:
          - 1
          - -1
        enum_integer_only:
          type: integer
          enum:
          - 2
          - -2
        enum_number:
          type: number
          format: double
          enum:
          - 1.1
          - -1.2
        outerEnum:
          $ref: '#/components/schemas/OuterEnum'
        outerEnumInteger:
          $ref: '#/components/schemas/OuterEnumInteger'
        outerEnumDefaultValue:
          $ref: '#/components/schemas/OuterEnumDefaultValue'
        outerEnumIntegerDefaultValue:
          $ref: '#/components/schemas/OuterEnumIntegerDefaultValue'
    AdditionalPropertiesClass:
      type: object
      properties:
        map_property:
          type: object
          additionalProperties:
            type: string
        map_of_map_property:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
        anytype_1: {}
        map_with_undeclared_properties_anytype_1:
          type: object
        map_with_undeclared_properties_anytype_2:
          type: object
          properties: {}
        map_with_undeclared_properties_anytype_3:
          type: object
          additionalProperties: true
        empty_map:
          type: object
          additionalProperties: false
          description: an object with no declared properties and no undeclared properties, hence it's an empty map.
        map_with_undeclared_properties_string:
          type: object
          additionalProperties:
            type: string
    MixedPropertiesAndAdditionalPropertiesClass:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        dateTime:
          type: string
          format: date-time
        map:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Animal'
    List:
      type: object
      properties:
        "123-list":
          type: string
    Client:
      type: object
      properties:
        client:
          type: string
    ReadOnlyFirst:
      type: object
      properties:
        bar:
          type: string
          readOnly: true
        baz:
          type: string
    hasOnlyReadOnly:
      type: object
      properties:
        bar:
          type: string
          readOnly: true
        foo:
          type: string
          readOnly: true
    Capitalization:
      type: object
      properties:
        smallCamel:
          type: string
        CapitalCamel:
          type: string
        small_Snake:
          type: string
        Capital_Snake:
          type: string
        SCA_ETH_Flow_Points:
          type: string
        ATT_NAME:
          type: string
          description: |
            Name of the pet
    MapTest:
      type: object
      properties:
        map_map_of_string:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
        map_of_enum_string:
          type: object
          additionalProperties:
            type: string
            enum:
            - UPPER
            - lower
        direct_map:
          type: object
          additionalProperties:
            type: boolean
        indirect_map:
          $ref: '#/components/schemas/StringBooleanMap'
    ArrayTest:
      type: object
      properties:
        array_of_string:
          type: array
          items:
            type: string
        array_array_of_integer:
          type: array
          items:
            type: array
            items:
              type: integer
              format: int64
        array_array_of_model:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/ReadOnlyFirst'
    NumberOnly:
      type: object
      properties:
        JustNumber:
          type: number
    ArrayOfNumberOnly:
      type: object
      properties:
        ArrayNumber:
          type: array
          items:
            type: number
    ArrayOfArrayOfNumberOnly:
      type: object
      properties:
        ArrayArrayNumber:
          type: array
          items:
            type: array
            items:
              type: number
    EnumArrays:
      type: object
      properties:
        just_symbol:
          type: string
          enum:
          - '>='
          - $
        array_enum:
          type: array
          items:
            type: string
            enum:
            - fish
            - crab
    OuterEnum:
      type: string
      nullable: true
      enum:
      - placed
      - approved
      - delivered
    OuterEnumInteger:
      type: integer
      enum:
      - 0
      - 1
      - 2
    OuterEnumDefaultValue:
      type: string
      default: placed
      enum:
      - placed
      - approved
      - delivered
    OuterEnumIntegerDefaultValue:
      type: integer
      default: 0
      enum:
      - 0
      - 1
      - 2
    OuterComposite:
      type: object
      properties:
        my_number:
          $ref: '#/components/schemas/OuterNumber'
        my_string:
          $ref: '#/components/schemas/OuterString'
        my_boolean:
          $ref: '#/components/schemas/OuterBoolean'
    OuterNumber:
      type: number
    OuterString:
      type: string
    OuterBoolean:
      type: boolean
      x-codegen-body-parameter-name: boolean_post_body
    StringBooleanMap:
      type: object
      additionalProperties:
        type: boolean
    FileSchemaTestClass:
      type: object
      properties:
        file:
          $ref: '#/components/schemas/File'
        files:
          type: array
          items:
            $ref: '#/components/schemas/File'
    File:
      type: object
      properties:
        sourceURI:
          type: string
          description: Test capitalization
      description: Must be named `File` for test.
    _special_model.name_:
      properties:
        $special[property.name]:
          type: integer
          format: int64
        _special_model.name_:
          type: string
      xml:
        name: $special[model.name]
    HealthCheckResult:
      type: object
      properties:
        NullableMessage:
          type: string
          nullable: true
      description: Just a string to inform instance is up and running. Make it nullable in hope to get it as pointer in generated model.
    fruit:
      properties:
        color:
          type: string
      additionalProperties: false
      oneOf:
      - $ref: '#/components/schemas/apple'
      - $ref: '#/components/schemas/banana'
    apple:
      type: object
      properties:
        cultivar:
          pattern: ^[a-zA-Z\s]*$
          type: string
        origin:
          pattern: /^[A-Z\s]*$/i
          type: string
      nullable: true
    banana:
      type: object
      properties:
        lengthCm:
          type: number
    mammal:
      discriminator:
        propertyName: className
      oneOf:
      - $ref: '#/components/schemas/whale'
      - $ref: '#/components/schemas/zebra'
      - $ref: '#/components/schemas/Pig'
    whale:
      required:
      - className
      type: object
      properties:
        hasBaleen:
          type: boolean
        hasTeeth:
          type: boolean
        className:
          type: string
    zebra:
      required:
      - className
      type: object
      properties:
        type:
          type: string
          enum:
          - plains
          - mountain
          - grevys
        className:
          type: string
      additionalProperties: true
    Pig:
      discriminator:
        propertyName: className
      oneOf:
      - $ref: '#/components/schemas/BasquePig'
      - $ref: '#/components/schemas/DanishPig'
    BasquePig:
      required:
      - className
      type: object
      properties:
        className:
          type: string
    DanishPig:
      required:
      - className
      type: object
      properties:
        className:
          type: string
    gmFruit:
      properties:
        color:
          type: string
      additionalProperties: false
      anyOf:
      - $ref: '#/components/schemas/apple'
      - $ref: '#/components/schemas/banana'
    fruitReq:
      additionalProperties: false
      oneOf:
      - type: object
      - $ref: '#/components/schemas/appleReq'
      - $ref: '#/components/schemas/bananaReq'
    appleReq:
      required:
      - cultivar
      type: object
      properties:
        cultivar:
          type: string
        mealy:
          type: boolean
      additionalProperties: false
    bananaReq:
      required:
      - lengthCm
      type: object
      properties:
        lengthCm:
          type: number
        sweet:
          type: boolean
      additionalProperties: false
    Drawing:
      type: object
      properties:
        mainShape:
          $ref: '#/components/schemas/Shape'
        shapeOrNull:
          $ref: '#/components/schemas/ShapeOrNull'
        nullableShape:
          $ref: '#/components/schemas/NullableShape'
        shapes:
          type: array
          items:
            $ref: '#/components/schemas/Shape'
      additionalProperties:
        $ref: '#/components/schemas/fruit'
    Shape:
      discriminator:
        propertyName: shapeType
      oneOf:
      - $ref: '#/components/schemas/Triangle'
      - $ref: '#/components/schemas/Quadrilateral'
    ShapeOrNull:
      description: The value may be a shape or the 'null' value. This is introduced in OAS schema >= 3.1.
      discriminator:
        propertyName: shapeType
      oneOf:
      - $ref: '#/components/schemas/Triangle'
      - $ref: '#/components/schemas/Quadrilateral'
    NullableShape:
      description: The value may be a shape or the 'null' value. The 'nullable' attribute was introduced in OAS schema >= 3.0 and has been deprecated in OAS schema >= 3.1.
      nullable: true
      discriminator:
        propertyName: shapeType
      oneOf:
      - $ref: '#/components/schemas/Triangle'
      - $ref: '#/components/schemas/Quadrilateral'
    ShapeInterface:
      required:
      - shapeType
      properties:
        shapeType:
          type: string
    TriangleInterface:
      required:
      - triangleType
      properties:
        triangleType:
          type: string
    Triangle:
      discriminator:
        propertyName: triangleType
      oneOf:
      - $ref: '#/components/schemas/EquilateralTriangle'
      - $ref: '#/components/schemas/IsoscelesTriangle'
      - $ref: '#/components/schemas/ScaleneTriangle'
    EquilateralTriangle:
      allOf:
      - $ref: '#/components/schemas/ShapeInterface'
      - $ref: '#/components/schemas/TriangleInterface'
    IsoscelesTriangle:
      additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/ShapeInterface'
      - $ref: '#/components/schemas/TriangleInterface'
    ScaleneTriangle:
      allOf:
      - $ref: '#/components/schemas/ShapeInterface'
      - $ref: '#/components/schemas/TriangleInterface'
    QuadrilateralInterface:
      required:
      - quadrilateralType
      properties:
        quadrilateralType:
          type: string
    Quadrilateral:
      discriminator:
        propertyName: quadrilateralType
      oneOf:
      - $ref: '#/components/schemas/SimpleQuadrilateral'
      - $ref: '#/components/schemas/ComplexQuadrilateral'
    SimpleQuadrilateral:
      allOf:
      - $ref: '#/components/schemas/ShapeInterface'
      - $ref: '#/components/schemas/QuadrilateralInterface'
    ComplexQuadrilateral:
      allOf:
      - $ref: '#/components/schemas/ShapeInterface'
      - $ref: '#/components/schemas/QuadrilateralInterface'
    GrandparentAnimal:
      required:
      - pet_type
      type: object
      properties:
        pet_type:
          type: string
      discriminator:
        propertyName: pet_type
    ParentPet:
      type: object
      allOf:
      - $ref: '#/components/schemas/GrandparentAnimal'
    ChildCat:
      allOf:
      - $ref: '#/components/schemas/ParentPet'
      - type: object
        properties:
          name:
            type: string
          pet_type:
            type: string
            default: ChildCat
    ArrayOfEnums:
      type: array
      items:
        $ref: '#/components/schemas/OuterEnum'
    DateTimeTest:
      type: string
      format: date-time
      example: 2010-01-01T10:10:10.000111+01:00
      default: 2010-01-01T10:10:10.000111+01:00
    DeprecatedObject:
      type: object
      properties:
        name:
          type: string
      deprecated: true
    ObjectWithDeprecatedFields:
      type: object
      properties:
        uuid:
          type: string
        id:
          type: number
          deprecated: true
        deprecatedRef:
          $ref: '#/components/schemas/DeprecatedObject'
        bars:
          type: array
          deprecated: true
          items:
            $ref: '#/components/schemas/Bar'
    inline_response_default:
      type: object
      properties:
        string:
          $ref: '#/components/schemas/Foo'
    pet_petId_body:
      type: object
      properties:
        name:
          type: string
          description: Updated name of the pet
        status:
          type: string
          description: Updated status of the pet
    petId_uploadImage_body:
      type: object
      properties:
        additionalMetadata:
          type: string
          description: Additional data to pass to server
        file:
          type: string
          description: file to upload
          format: binary
    fake_body:
      required:
      - byte
      - double
      - number
      - pattern_without_delimiter
      type: object
      properties:
        integer:
          maximum: 100
          minimum: 10
          type: integer
          description: None
        int32:
          maximum: 200
          minimum: 20
          type: integer
          description: None
          format: int32
        int64:
          type: integer
          description: None
          format: int64
        number:
          maximum: 543.2
          minimum: 32.1
          type: number
          description: None
        float:
          maximum: 987.6
          type: number
          description: None
          format: float
        double:
          maximum: 123.4
          minimum: 67.8
          type: number
          description: None
          format: double
        string:
          pattern: /[a-z]/i
          type: string
          description: None
        pattern_without_delimiter:
          pattern: ^[A-Z].*
          type: string
          description: None
        byte:
          type: string
          description: None
          format: byte
        binary:
          type: string
          description: None
          format: binary
        date:
          type: string
          description: None
          format: date
        dateTime:
          type: string
          description: None
          format: date-time
          example: 2020-02-02T20:20:20.22222Z
        password:
          maxLength: 64
          minLength: 10
          type: string
          description: None
          format: password
        callback:
          type: string
          description: None
    petId_uploadImageWithRequiredFile_body:
      required:
      - requiredFile
      type: object
      properties:
        additionalMetadata:
          type: string
          description: Additional data to pass to server
        requiredFile:
          type: string
          description: file to upload
          format: binary
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
          examples:
            simple-list:
              summary: Simple list example
              description: Should not get into code examples
              value:
              - username: foo
              - username: bar
      required: true
    Client:
      description: client model
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Client'
      required: true
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/api/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
    api_key_query:
      type: apiKey
      name: api_key_query
      in: query
    http_basic_test:
      type: http
      scheme: basic
    bearer_test:
      type: http
      scheme: bearer
      bearerFormat: JWT
    http_signature_test:
      type: http
      scheme: signature
